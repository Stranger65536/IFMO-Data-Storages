import org.flywaydb.gradle.FlywayExtension
import org.flywaydb.gradle.task.FlywayCleanTask
import org.flywaydb.gradle.task.FlywayMigrateTask

buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath('com.oracle:ojdbc7:12.1.0.2')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.flywaydb.flyway' version '4.2.0'
}

group 'org.trofiv'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

project.ext.guavaVersion = '23.0'
project.ext.log4jVersion = '2.9.1'
project.ext.jacksonVersion = '2.9.2'
project.ext.ojdbcVersion = '12.1.0.2'
project.ext.lombokVersion = '1.16.16'
project.ext.commonsCsvVersion = '1.5'
project.ext.commonsExecVersion = '1.3'
project.ext.commonsLang3Version = '3.6'
project.ext.springBootVersion = '1.5.8.RELEASE'

dependencies {
    compile(
            [group: 'org.projectlombok', name: 'lombok', version: project.lombokVersion],

            [group: 'com.oracle', name: 'ojdbc7', version: project.ojdbcVersion],

            [group: 'com.google.guava', name: 'guava', version: project.guavaVersion],

            [group: 'org.springframework.boot', name: 'spring-boot-starter', version: springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: springBootVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion],

            [group: 'org.apache.logging.log4j', name: 'log4j-api', version: project.log4jVersion],
            [group: 'org.apache.logging.log4j', name: 'log4j-core', version: project.log4jVersion],
            [group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: project.log4jVersion],

            [group: 'org.apache.commons', name: 'commons-exec', version: project.commonsExecVersion],
            [group: 'org.apache.commons', name: 'commons-lang3', version: project.commonsLang3Version],
            [group: 'org.apache.commons', name: 'commons-csv', version: project.commonsCsvVersion],

            [group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: project.jacksonVersion],
    )
}

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
}

//noinspection GroovyAssignabilityCheck
task flywayMigrateStorage(type: FlywayMigrateTask) {
    extension = new FlywayExtension()
    extension.driver = 'oracle.jdbc.OracleDriver'
    extension.schemas = [project.findProperty('storage.schema')]
    extension.locations = ['filesystem:schema/storage/']
    extension.sqlMigrationPrefix = 'V'
    extension.baselineOnMigrate = true
    extension.user = project.findProperty('storage.admin.user')
    extension.password = project.findProperty('storage.admin.password')
    extension.baselineDescription = 'Storage init'
    extension.url = project.findProperty('storage.url')
    extension.placeholders = [
            'STORAGE_USER' : project.findProperty('storage.user'),
            'STORAGE_PASSWORD' : project.findProperty('storage.password'),
    ]
}

//noinspection GroovyAssignabilityCheck
task flywayCleanStorage(type: FlywayCleanTask) {
    extension = new FlywayExtension()
    extension.driver = 'oracle.jdbc.OracleDriver'
    extension.schemas = [project.findProperty('storage.schema')]
    extension.locations = ['filesystem:schema/storage/']
    extension.sqlMigrationPrefix = 'V'
    extension.baselineOnMigrate = true
    extension.user = project.findProperty('storage.admin.user')
    extension.password = project.findProperty('storage.admin.password')
    extension.baselineDescription = 'Storage init'
    extension.url = project.findProperty('storage.url')
    extension.placeholders = [
            'STORAGE_USER' : project.findProperty('storage.user'),
            'STORAGE_PASSWORD' : project.findProperty('storage.password')
    ]
}

//noinspection GroovyAssignabilityCheck
task flywayMigrateBranch1(type: FlywayMigrateTask) {
    extension = new FlywayExtension()
    extension.driver = 'oracle.jdbc.OracleDriver'
    extension.schemas = [project.findProperty('branch1.schema')]
    extension.locations = ['filesystem:schema/branch1/']
    extension.sqlMigrationPrefix = 'V'
    extension.baselineOnMigrate = true
    extension.user = project.findProperty('branch1.admin.user')
    extension.password = project.findProperty('branch1.admin.password')
    extension.baselineDescription = 'Branch 1 init'
    extension.url = project.findProperty('branch1.url')
    extension.placeholders = [
            'BRANCH_1_USER' : project.findProperty('branch1.user'),
            'BRANCH_1_PASSWORD' : project.findProperty('branch1.password')
    ]
}

//noinspection GroovyAssignabilityCheck
task flywayCleanBranch1(type: FlywayCleanTask) {
    extension = new FlywayExtension()
    extension.driver = 'oracle.jdbc.OracleDriver'
    extension.schemas = [project.findProperty('branch1.schema')]
    extension.locations = ['filesystem:schema/branch1/']
    extension.sqlMigrationPrefix = 'V'
    extension.baselineOnMigrate = true
    extension.user = project.findProperty('branch1.admin.user')
    extension.password = project.findProperty('branch1.admin.password')
    extension.baselineDescription = 'Branch 1 init'
    extension.url = project.findProperty('branch1.url')
    extension.placeholders = [
            'BRANCH_1_USER' : project.findProperty('branch1.user'),
            'BRANCH_1_PASSWORD' : project.findProperty('branch1.password')
    ]
}

//noinspection GroovyAssignabilityCheck
task flywayMigrateBranch2(type: FlywayMigrateTask) {
    extension = new FlywayExtension()
    extension.driver = 'oracle.jdbc.OracleDriver'
    extension.schemas = [project.findProperty('branch2.schema')]
    extension.locations = ['filesystem:schema/branch2/']
    extension.sqlMigrationPrefix = 'V'
    extension.baselineOnMigrate = true
    extension.user = project.findProperty('branch2.admin.user')
    extension.password = project.findProperty('branch2.admin.password')
    extension.baselineDescription = 'Branch 2 init'
    extension.url = project.findProperty('branch2.url')
    extension.placeholders = [
            'BRANCH_2_USER' : project.findProperty('branch2.user'),
            'BRANCH_2_PASSWORD' : project.findProperty('branch2.password')
    ]
}

//noinspection GroovyAssignabilityCheck
task flywayCleanBranch2(type: FlywayCleanTask) {
    extension = new FlywayExtension()
    extension.driver = 'oracle.jdbc.OracleDriver'
    extension.schemas = [project.findProperty('branch2.schema')]
    extension.locations = ['filesystem:schema/branch2/']
    extension.sqlMigrationPrefix = 'V'
    extension.baselineOnMigrate = true
    extension.user = project.findProperty('branch2.admin.user')
    extension.password = project.findProperty('branch2.admin.password')
    extension.baselineDescription = 'Branch 2 init'
    extension.url = project.findProperty('branch2.url')
    extension.placeholders = [
            'BRANCH_2_USER' : project.findProperty('branch2.user'),
            'BRANCH_2_PASSWORD' : project.findProperty('branch2.password')
    ]
}

build.dependsOn(flywayMigrateBranch1)
build.dependsOn(flywayMigrateBranch2)
build.dependsOn(flywayMigrateStorage)