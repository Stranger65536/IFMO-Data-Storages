CREATE OR REPLACE PROCEDURE BACKUP_BRANCH1_CUSTOMERS
AS
  F_CHANGED_AT        TIMESTAMP := SYSDATE;
  CURSOR CUSTOMERS_CUR
  IS
    SELECT
      CUSTOMER_ID,
      FIRST_NAME,
      LAST_NAME,
      MIDDLE_NAME,
      EMAIL,
      PHONE_NUMBER
    FROM CUSTOMERS@BRANCH_1
    ORDER BY CUSTOMER_ID ASC;

  CURSOR CUSTOMERS_STORE_CUR
  IS
    SELECT
      CUSTOMER_ID,
      FIRST_NAME,
      LAST_NAME,
      MIDDLE_NAME,
      EMAIL,
      PHONE_NUMBER,
      STATUS
    FROM CUSTOMERS_STORE CS1
      INNER JOIN (
                   SELECT
                     CUSTOMER_ID     C_ID,
                     MAX(CHANGED_AT) CHANGED_AT
                   FROM CUSTOMERS_STORE
                   GROUP BY CUSTOMER_ID
                 ) CS2
        ON CS1.CUSTOMER_ID = CS2.C_ID
           AND CS1.CHANGED_AT = CS2.CHANGED_AT
    ORDER BY CUSTOMER_ID ASC;

  CUSTOMER_REC        CUSTOMERS_CUR%ROWTYPE;
  CUSTOMERS_STORE_REC CUSTOMERS_STORE_CUR%ROWTYPE;

  FUNCTION IS_DELETED_CUSTOMER(
    RECORD_C CUSTOMERS_STORE_CUR%ROWTYPE)
    RETURN NUMBER
  AS
    REC_EXISTS NUMBER;
    BEGIN
      SELECT COUNT(*)
      INTO REC_EXISTS
      FROM CUSTOMERS_STORE CS1
        INNER JOIN (
                     SELECT
                       CUSTOMER_ID     C_ID,
                       MAX(CHANGED_AT) CHANGED_AT
                     FROM CUSTOMERS_STORE
                     WHERE CUSTOMER_ID = RECORD_C.CUSTOMER_ID
                     GROUP BY CUSTOMER_ID
                   ) CS2
          ON CS1.CUSTOMER_ID = CS2.C_ID
             AND CS1.CHANGED_AT = CS2.CHANGED_AT
      WHERE CS1.STATUS = 'D'
            AND ROWNUM = 1;
      IF (REC_EXISTS = 1)
      THEN
        BEGIN
          DBMS_OUTPUT.PUT_LINE('ALREADY DELETED');
          RETURN 1;
        END;
      ELSE
        BEGIN
          DBMS_OUTPUT.PUT_LINE('NOT DELETED');
          RETURN 0;
        END;
      END IF;
    END;

  FUNCTION IS_EQUAL_CUSTOMERS(
    RECORD_C CUSTOMERS_CUR%ROWTYPE,
    RECORD_S CUSTOMERS_STORE_CUR%ROWTYPE
  )
    RETURN NUMBER
  AS
    BEGIN
      IF RECORD_C.CUSTOMER_ID = RECORD_S.CUSTOMER_ID
         AND RECORD_C.FIRST_NAME = RECORD_S.FIRST_NAME
         AND RECORD_C.LAST_NAME = RECORD_S.LAST_NAME
         AND RECORD_C.MIDDLE_NAME = RECORD_S.MIDDLE_NAME
         AND RECORD_C.EMAIL = RECORD_S.EMAIL
         AND RECORD_C.PHONE_NUMBER = RECORD_S.PHONE_NUMBER
      THEN
        BEGIN
          DBMS_OUTPUT.PUT_LINE('EQUAL');
          RETURN 1;
        END;
      ELSE
        BEGIN
          DBMS_OUTPUT.PUT_LINE('NOT EQUAL');
          RETURN 0;
        END;
      END IF;
    END;

  PROCEDURE INSERT_CUSTOMER(
    RECORD       CUSTOMERS_CUR%ROWTYPE,
    F_CHANGED_AT TIMESTAMP
  ) AS
    BEGIN
      INSERT INTO CUSTOMERS_STORE_TEMP
      VALUES
        (
          F_CHANGED_AT,
          RECORD.CUSTOMER_ID,
          'I',
          RECORD.FIRST_NAME,
          RECORD.LAST_NAME,
          RECORD.MIDDLE_NAME,
          RECORD.EMAIL,
          RECORD.PHONE_NUMBER
        );
    END;

  PROCEDURE UPDATE_CUSTOMER(
    RECORD       CUSTOMERS_CUR%ROWTYPE,
    F_CHANGED_AT TIMESTAMP
  ) AS
    BEGIN
      INSERT INTO CUSTOMERS_STORE_TEMP
      VALUES
        (
          F_CHANGED_AT,
          RECORD.CUSTOMER_ID,
          'U',
          RECORD.FIRST_NAME,
          RECORD.LAST_NAME,
          RECORD.MIDDLE_NAME,
          RECORD.EMAIL,
          RECORD.PHONE_NUMBER
        );
    END;

  PROCEDURE DELETE_CUSTOMER(
    RECORD       CUSTOMERS_STORE_CUR%ROWTYPE,
    F_CHANGED_AT TIMESTAMP
  ) AS
    BEGIN
      INSERT INTO CUSTOMERS_STORE_TEMP
      VALUES
        (
          F_CHANGED_AT,
          RECORD.CUSTOMER_ID,
          'D',
          NULL,
          NULL,
          NULL,
          NULL,
          NULL
        );
    END;
  BEGIN
    OPEN CUSTOMERS_CUR;
    OPEN CUSTOMERS_STORE_CUR;

    FETCH CUSTOMERS_CUR INTO CUSTOMER_REC;
    FETCH CUSTOMERS_STORE_CUR INTO CUSTOMERS_STORE_REC;

    LOOP
      EXIT WHEN CUSTOMERS_CUR%NOTFOUND AND CUSTOMERS_STORE_CUR%NOTFOUND;

      IF (CUSTOMERS_CUR%NOTFOUND)
      THEN
        CUSTOMER_REC.CUSTOMER_ID := NULL;
      END IF;

      IF (CUSTOMERS_STORE_CUR%NOTFOUND)
      THEN
        CUSTOMERS_STORE_REC.CUSTOMER_ID := NULL;
      END IF;

      DBMS_OUTPUT.PUT_LINE('BRANCH:  ' || RAWTOHEX(CUSTOMER_REC.CUSTOMER_ID));
      DBMS_OUTPUT.PUT_LINE('STORAGE: ' || RAWTOHEX(CUSTOMERS_STORE_REC.CUSTOMER_ID));

      IF (CUSTOMERS_STORE_REC.CUSTOMER_ID IS NULL
          OR CUSTOMER_REC.CUSTOMER_ID IS NOT NULL
             AND CUSTOMERS_STORE_REC.CUSTOMER_ID IS NOT NULL
             AND RAWTOHEX(CUSTOMER_REC.CUSTOMER_ID) < RAWTOHEX(CUSTOMERS_STORE_REC.CUSTOMER_ID))
      THEN
        BEGIN
          DBMS_OUTPUT.PUT_LINE('INSERT ' || CUSTOMER_REC.CUSTOMER_ID);
          INSERT_CUSTOMER(CUSTOMER_REC, F_CHANGED_AT);
          FETCH CUSTOMERS_CUR INTO CUSTOMER_REC;
        END;
      ELSIF (CUSTOMER_REC.CUSTOMER_ID IS NULL
             OR CUSTOMER_REC.CUSTOMER_ID IS NOT NULL
                AND CUSTOMERS_STORE_REC.CUSTOMER_ID IS NOT NULL
                AND RAWTOHEX(CUSTOMER_REC.CUSTOMER_ID) > RAWTOHEX(CUSTOMERS_STORE_REC.CUSTOMER_ID))
        THEN
          BEGIN
            IF (IS_DELETED_CUSTOMER(CUSTOMERS_STORE_REC) = 0)
            THEN
              BEGIN
                DBMS_OUTPUT.PUT_LINE('DELETE ' || CUSTOMERS_STORE_REC.CUSTOMER_ID);
                DELETE_CUSTOMER(CUSTOMERS_STORE_REC, F_CHANGED_AT);
              END;
            END IF;
            FETCH CUSTOMERS_STORE_CUR INTO CUSTOMERS_STORE_REC;
          END;
      ELSIF (RAWTOHEX(CUSTOMER_REC.CUSTOMER_ID) = RAWTOHEX(CUSTOMERS_STORE_REC.CUSTOMER_ID))
        THEN
          BEGIN
            IF IS_EQUAL_CUSTOMERS(CUSTOMER_REC, CUSTOMERS_STORE_REC) = 0
            THEN
              DBMS_OUTPUT.PUT_LINE('UPDATE ' || CUSTOMER_REC.CUSTOMER_ID);
              UPDATE_CUSTOMER(CUSTOMER_REC, F_CHANGED_AT);
            END IF;
            FETCH CUSTOMERS_CUR INTO CUSTOMER_REC;
            FETCH CUSTOMERS_STORE_CUR INTO CUSTOMERS_STORE_REC;
          END;
      END IF;
    END LOOP;

    CLOSE CUSTOMERS_CUR;
    CLOSE CUSTOMERS_STORE_CUR;

    INSERT INTO CUSTOMERS_STORE SELECT *
                                FROM CUSTOMERS_STORE_TEMP;
    DELETE FROM CUSTOMERS_STORE_TEMP;
  END;