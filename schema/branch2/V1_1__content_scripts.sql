CREATE OR REPLACE TYPE ARRAY_T IS TABLE OF RAW(32);
/
CREATE OR REPLACE TYPE WIDE_ARRAY_T IS TABLE OF RAW(64);
/
CREATE OR REPLACE FUNCTION RANDOM_TIMESTAMP
  RETURN TIMESTAMP
AS
  BEGIN
    RETURN TO_TIMESTAMP(SYSDATE) + (DBMS_RANDOM.VALUE(0, 86400) / 86400);
  END;
/
CREATE OR REPLACE PROCEDURE INSERT_GOOD(
  F_GOOD_ID     RAW,
  F_VENDOR_CODE NUMBER,
  F_NAME        VARCHAR2,
  F_DESCRIPTION VARCHAR2,
  F_PRICE       NUMBER
) AS
  BEGIN
    INSERT INTO GOODS VALUES
      (
        F_GOOD_ID,
        F_VENDOR_CODE,
        F_NAME,
        F_DESCRIPTION,
        F_PRICE
      );
  END;
/
CREATE OR REPLACE PROCEDURE UPDATE_GOOD(
  F_GOOD_ID     RAW,
  F_VENDOR_CODE NUMBER,
  F_NAME        VARCHAR2,
  F_DESCRIPTION VARCHAR2,
  F_BASE_PRICE  NUMBER
) AS
  BEGIN
    UPDATE GOODS
    SET VENDOR_CODE = F_VENDOR_CODE,
      NAME          = F_NAME,
      DESCRIPTION   = F_DESCRIPTION,
      BASE_PRICE    = F_BASE_PRICE
    WHERE GOOD_ID = F_GOOD_ID;
  END;
/
CREATE OR REPLACE PROCEDURE DELETE_GOOD(
  ID RAW
) AS
  BEGIN
    DELETE FROM GOODS
    WHERE GOOD_ID = ID;
  END;
/
CREATE OR REPLACE FUNCTION SELECT_RANDOM_GOOD_IDS(
  RECORDS_NUMBER NUMBER)
  RETURN ARRAY_T
AS
  RESULT ARRAY_T := ARRAY_T();
  BEGIN
    RESULT.EXTEND(RECORDS_NUMBER);

    SELECT GOOD_ID
    BULK COLLECT INTO RESULT
    FROM
      (SELECT
         GOOD_ID,
         DBMS_RANDOM.VALUE
       FROM GOODS
       ORDER BY 2)
    WHERE ROWNUM <= RECORDS_NUMBER;

    RETURN RESULT;
  END;
/
CREATE OR REPLACE FUNCTION INSERT_RANDOM_GOODS(
  RECORDS_NUMBER_FLOOR IN NUMBER,
  RECORDS_NUMBER_CEIL  IN NUMBER)
  RETURN ARRAY_T
AS
  INSERTED_IDS ARRAY_T;
  INSERTED     NUMERIC;
  BEGIN
    SELECT TRUNC(DBMS_RANDOM.VALUE(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL))
    INTO INSERTED
    FROM DUAL;

    INSERTED_IDS := ARRAY_T();

    FOR I IN 1..INSERTED LOOP
      INSERTED_IDS.EXTEND();
      INSERTED_IDS(I) := SYS_GUID();
      INSERT_GOOD(
          INSERTED_IDS(I),
          TRUNC(DBMS_RANDOM.VALUE(1, 1000000000000000)),
          'NAME_' || DBMS_RANDOM.STRING('A', 30),
          'DESC_' || DBMS_RANDOM.STRING('A', 30),
          TRUNC(DBMS_RANDOM.VALUE(1, 1000000))
      );
    END LOOP;

    RETURN INSERTED_IDS;
  END;
/
CREATE OR REPLACE FUNCTION UPDATE_RANDOM_GOODS(
  RECORDS_NUMBER_FLOOR IN NUMBER,
  RECORDS_NUMBER_CEIL  IN NUMBER)
  RETURN ARRAY_T
AS
  UPDATED_IDS ARRAY_T;
  UPDATED     NUMERIC;
  BEGIN
    SELECT TRUNC(DBMS_RANDOM.VALUE(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL))
    INTO UPDATED
    FROM DUAL;

    UPDATED_IDS := SELECT_RANDOM_GOOD_IDS(UPDATED);

    FOR I IN 1..UPDATED_IDS.COUNT LOOP
      UPDATE_GOOD(
          UPDATED_IDS(I),
          TRUNC(DBMS_RANDOM.VALUE(1, 1000000000000000)),
          'NAME_' || DBMS_RANDOM.STRING('A', 30),
          'DESC_' || DBMS_RANDOM.STRING('A', 30),
          TRUNC(DBMS_RANDOM.VALUE(1, 1000000))
      );
    END LOOP;

    RETURN UPDATED_IDS;
  END;
/
CREATE OR REPLACE FUNCTION DELETE_RANDOM_GOODS(
  RECORDS_NUMBER_FLOOR IN NUMBER,
  RECORDS_NUMBER_CEIL  IN NUMBER)
  RETURN ARRAY_T
AS
  DELETED_IDS ARRAY_T;
  DELETED     NUMERIC;
  BEGIN
    SELECT TRUNC(DBMS_RANDOM.VALUE(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL))
    INTO DELETED
    FROM DUAL;

    DELETED_IDS := SELECT_RANDOM_GOOD_IDS(DELETED);

    FOR I IN 1..DELETED_IDS.COUNT LOOP
      DELETE_GOOD(DELETED_IDS(I));
    END LOOP;

    RETURN DELETED_IDS;
  END;
/
CREATE OR REPLACE PROCEDURE INSERT_PROMOTION(
  F_PROMOTION_ID RAW,
  F_VALID_FROM   TIMESTAMP,
  F_VALID_TO     TIMESTAMP,
  F_DISCOUNT_PCT NUMBER
) AS
  BEGIN
    INSERT INTO PROMOTIONS VALUES
      (
        F_PROMOTION_ID,
        F_VALID_FROM,
        F_VALID_TO,
        F_DISCOUNT_PCT
      );
  END;
/
CREATE OR REPLACE PROCEDURE UPDATE_PROMOTION(
  F_PROMOTION_ID RAW,
  F_VALID_FROM   TIMESTAMP,
  F_VALID_TO     TIMESTAMP,
  F_DISCOUNT_PCT NUMBER
) AS
  BEGIN
    UPDATE PROMOTIONS
    SET VALID_FROM = F_VALID_FROM,
      VALID_TO     = F_VALID_TO,
      DISCOUNT_PCT = F_DISCOUNT_PCT
    WHERE PROMOTION_ID = F_PROMOTION_ID;
  END;
/
CREATE OR REPLACE PROCEDURE DELETE_PROMOTION(
  ID RAW
) AS
  BEGIN
    DELETE FROM PROMOTIONS
    WHERE PROMOTION_ID = ID;
  END;
/
CREATE OR REPLACE FUNCTION SELECT_RANDOM_PROMOTION_IDS(
  RECORDS_NUMBER NUMBER)
  RETURN ARRAY_T
AS
  RESULT ARRAY_T := ARRAY_T();
  BEGIN
    RESULT.EXTEND(RECORDS_NUMBER);

    SELECT PROMOTION_ID
    BULK COLLECT INTO RESULT
    FROM
      (SELECT
         PROMOTION_ID,
         DBMS_RANDOM.VALUE
       FROM PROMOTIONS
       ORDER BY 2)
    WHERE ROWNUM <= RECORDS_NUMBER;

    RETURN RESULT;
  END;
/
CREATE OR REPLACE FUNCTION INSERT_RANDOM_PROMOTIONS(
  RECORDS_NUMBER_FLOOR IN NUMBER,
  RECORDS_NUMBER_CEIL  IN NUMBER)
  RETURN ARRAY_T
AS
  INSERTED_IDS ARRAY_T;
  INSERTED     NUMERIC;
  TIME_TEMP_1  TIMESTAMP;
  TIME_TEMP_2  TIMESTAMP;
  BEGIN
    SELECT TRUNC(DBMS_RANDOM.VALUE(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL))
    INTO INSERTED
    FROM DUAL;

    INSERTED_IDS := ARRAY_T();

    FOR I IN 1..INSERTED LOOP
      INSERTED_IDS.EXTEND();
      INSERTED_IDS(I) := SYS_GUID();
      TIME_TEMP_1 := RANDOM_TIMESTAMP();
      TIME_TEMP_2 := RANDOM_TIMESTAMP();
      INSERT_PROMOTION
      (
          INSERTED_IDS(I),
          TIME_TEMP_1,
          TIME_TEMP_2,
          TRUNC(DBMS_RANDOM.VALUE(1, 100))
      );
    END LOOP;

    RETURN INSERTED_IDS;
  END;
/
CREATE OR REPLACE FUNCTION UPDATE_RANDOM_PROMOTIONS(
  RECORDS_NUMBER_FLOOR IN NUMBER,
  RECORDS_NUMBER_CEIL  IN NUMBER)
  RETURN ARRAY_T
AS
  UPDATED_IDS ARRAY_T;
  UPDATED     NUMERIC;
  TIME_TEMP_1 TIMESTAMP;
  TIME_TEMP_2 TIMESTAMP;
  BEGIN
    SELECT TRUNC(DBMS_RANDOM.VALUE(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL))
    INTO UPDATED
    FROM DUAL;

    UPDATED_IDS := SELECT_RANDOM_PROMOTION_IDS(UPDATED);

    FOR I IN 1..UPDATED_IDS.COUNT LOOP
      TIME_TEMP_1 := RANDOM_TIMESTAMP();
      TIME_TEMP_2 := RANDOM_TIMESTAMP();
      UPDATE_PROMOTION(
          UPDATED_IDS(I),
          TIME_TEMP_1,
          TIME_TEMP_2,
          TRUNC(DBMS_RANDOM.VALUE(1, 100))
      );
    END LOOP;

    RETURN UPDATED_IDS;
  END;
/
CREATE OR REPLACE FUNCTION DELETE_RANDOM_PROMOTIONS(
  RECORDS_NUMBER_FLOOR IN NUMBER,
  RECORDS_NUMBER_CEIL  IN NUMBER)
  RETURN ARRAY_T
AS
  DELETED_IDS ARRAY_T;
  DELETED     NUMERIC;
  BEGIN
    SELECT TRUNC(DBMS_RANDOM.VALUE(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL))
    INTO DELETED
    FROM DUAL;

    DELETED_IDS := SELECT_RANDOM_PROMOTION_IDS(DELETED);

    FOR I IN 1..DELETED_IDS.COUNT LOOP
      DELETE_PROMOTION(DELETED_IDS(I));
    END LOOP;

    RETURN DELETED_IDS;
  END;
/
CREATE OR REPLACE PROCEDURE INSERT_REALIZATION(
  F_REALIZATION_ID RAW,
  F_GOOD_ID        RAW,
  F_PROMOTION_ID   RAW,
  F_PRICE          NUMBER
) AS
  BEGIN
    INSERT INTO REALIZATIONS VALUES
      (
        F_REALIZATION_ID,
        F_GOOD_ID,
        F_PROMOTION_ID,
        F_PRICE
      );
  END;
/
CREATE OR REPLACE PROCEDURE UPDATE_REALIZATION(
  F_REALIZATION_ID RAW,
  F_PRICE          NUMBER
) AS
  BEGIN
    UPDATE REALIZATIONS
    SET PRICE = F_PRICE
    WHERE REALIZATION_ID = F_REALIZATION_ID;
  END;
/
CREATE OR REPLACE PROCEDURE DELETE_REALIZATION(
  ID RAW
) AS
  BEGIN
    DELETE FROM REALIZATIONS
    WHERE REALIZATION_ID = ID;
  END;
/
CREATE OR REPLACE FUNCTION SELECT_RANDOM_REALIZATION_IDS(
  RECORDS_NUMBER NUMBER)
  RETURN ARRAY_T
AS
  RESULT ARRAY_T := ARRAY_T();
  BEGIN
    RESULT.EXTEND(RECORDS_NUMBER);

    SELECT REALIZATION_ID
    BULK COLLECT INTO RESULT
    FROM
      (SELECT
         REALIZATION_ID,
         DBMS_RANDOM.VALUE
       FROM REALIZATIONS
       ORDER BY 2)
    WHERE ROWNUM <= RECORDS_NUMBER;

    RETURN RESULT;
  END;
/
CREATE OR REPLACE FUNCTION INSERT_RANDOM_REALIZATIONS(
  RECORDS_NUMBER_FLOOR IN NUMBER,
  RECORDS_NUMBER_CEIL  IN NUMBER,
  GOODS_IDS            IN ARRAY_T,
  PROMOTION_IDS        IN ARRAY_T)
  RETURN ARRAY_T
AS
  INSERTED_IDS   ARRAY_T;
  F_GOOD_ID      RAW(32);
  F_PROMOTION_ID RAW(32);
  INSERTED       NUMERIC;
  BEGIN
    SELECT TRUNC(DBMS_RANDOM.VALUE(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL))
    INTO INSERTED
    FROM DUAL;

    INSERTED_IDS := ARRAY_T();

    FOR I IN 1..INSERTED LOOP
      INSERTED_IDS.EXTEND();
      INSERTED_IDS(I) := SYS_GUID();
      F_GOOD_ID := GOODS_IDS(TRUNC(DBMS_RANDOM.VALUE(1, GOODS_IDS.COUNT)));
      F_PROMOTION_ID := PROMOTION_IDS(TRUNC(DBMS_RANDOM.VALUE(1, PROMOTION_IDS.COUNT)));
      INSERT_REALIZATION(
          INSERTED_IDS(I),
          F_GOOD_ID,
          F_PROMOTION_ID,
          TRUNC(DBMS_RANDOM.VALUE(1, 100))
      );
    END LOOP;

    RETURN INSERTED_IDS;
  END;
/
CREATE OR REPLACE FUNCTION UPDATE_RANDOM_REALIZATIONS(
  RECORDS_NUMBER_FLOOR IN NUMBER,
  RECORDS_NUMBER_CEIL  IN NUMBER)
  RETURN ARRAY_T
AS
  UPDATED_IDS ARRAY_T;
  UPDATED     NUMERIC;
  BEGIN
    SELECT TRUNC(DBMS_RANDOM.VALUE(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL))
    INTO UPDATED
    FROM DUAL;

    UPDATED_IDS := SELECT_RANDOM_REALIZATION_IDS(UPDATED);

    FOR I IN 1..UPDATED_IDS.COUNT LOOP
      UPDATE_REALIZATION(
          UPDATED_IDS(I),
          TRUNC(DBMS_RANDOM.VALUE(1, 100))
      );
    END LOOP;

    RETURN UPDATED_IDS;
  END;
/
CREATE OR REPLACE FUNCTION DELETE_RANDOM_REALIZATIONS(
  RECORDS_NUMBER_FLOOR IN NUMBER,
  RECORDS_NUMBER_CEIL  IN NUMBER)
  RETURN ARRAY_T
AS
  DELETED_IDS ARRAY_T;
  DELETED     NUMERIC;
  BEGIN
    SELECT TRUNC(DBMS_RANDOM.VALUE(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL))
    INTO DELETED
    FROM DUAL;

    DELETED_IDS := SELECT_RANDOM_REALIZATION_IDS(DELETED);

    FOR I IN 1..DELETED_IDS.COUNT LOOP
      DELETE_REALIZATION(DELETED_IDS(I));
    END LOOP;

    RETURN DELETED_IDS;
  END;
/
CREATE OR REPLACE PROCEDURE INSERT_GOOD_TO_PROMOTION(
  F_GOOD_ID      RAW,
  F_PROMOTION_ID RAW
) AS
  RECORD_EXISTS NUMBER(1);
  BEGIN
    SELECT COUNT(*)
    INTO RECORD_EXISTS
    FROM GOODS_TO_PROMOTIONS
    WHERE GOOD_ID = F_GOOD_ID
          AND PROMOTION_ID = F_PROMOTION_ID;
    IF (RECORD_EXISTS = 0)
    THEN
      INSERT INTO GOODS_TO_PROMOTIONS VALUES
        (
          F_GOOD_ID,
          F_PROMOTION_ID
        );
    END IF;
  END;
/
CREATE OR REPLACE PROCEDURE DELETE_GOOD_TO_PROMOTION(
  ID RAW
) AS
  BEGIN
    DELETE FROM GOODS_TO_PROMOTIONS
    WHERE CONCAT(GOOD_ID, PROMOTION_ID) = ID;
  END;
/
CREATE OR REPLACE FUNCTION SELECT_RANDOM_GOOD_TO_PROM_IDS(
  RECORDS_NUMBER NUMBER)
  RETURN WIDE_ARRAY_T
AS
  RESULT WIDE_ARRAY_T := WIDE_ARRAY_T();
  BEGIN
    RESULT.EXTEND(RECORDS_NUMBER);

    SELECT DATA
    BULK COLLECT INTO RESULT
    FROM
      (SELECT
         CONCAT(GOOD_ID, PROMOTION_ID) DATA,
         DBMS_RANDOM.VALUE
       FROM GOODS_TO_PROMOTIONS
       ORDER BY 2)
    WHERE ROWNUM <= RECORDS_NUMBER;

    RETURN RESULT;
  END;
/
CREATE OR REPLACE FUNCTION INSERT_RANDOM_GOODS_TO_PROM(
  RECORDS_NUMBER_FLOOR IN NUMBER,
  RECORDS_NUMBER_CEIL  IN NUMBER,
  GOODS_IDS            IN ARRAY_T,
  PROMOTIONS_IDS       IN ARRAY_T)
  RETURN WIDE_ARRAY_T
AS
  INSERTED_IDS   WIDE_ARRAY_T;
  F_GOOD_ID      RAW(32);
  F_PROMOTION_ID RAW(32);
  INSERTED       NUMERIC;
  BEGIN
    SELECT TRUNC(DBMS_RANDOM.VALUE(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL))
    INTO INSERTED
    FROM DUAL;

    INSERTED_IDS := WIDE_ARRAY_T();

    FOR I IN 1..INSERTED LOOP
      INSERTED_IDS.EXTEND();
      F_GOOD_ID := GOODS_IDS(TRUNC(DBMS_RANDOM.VALUE(1, GOODS_IDS.COUNT)));
      F_PROMOTION_ID := PROMOTIONS_IDS(TRUNC(DBMS_RANDOM.VALUE(1, PROMOTIONS_IDS.COUNT)));
      INSERTED_IDS(I) := CONCAT(F_GOOD_ID, F_PROMOTION_ID);
      INSERT_GOOD_TO_PROMOTION(
          F_GOOD_ID,
          F_PROMOTION_ID
      );
    END LOOP;

    RETURN INSERTED_IDS;
  END;
/
CREATE OR REPLACE FUNCTION DELETE_RANDOM_GOODS_TO_PROM(
  RECORDS_NUMBER_FLOOR IN NUMBER,
  RECORDS_NUMBER_CEIL  IN NUMBER)
  RETURN WIDE_ARRAY_T
AS
  DELETED_IDS WIDE_ARRAY_T;
  DELETED     NUMERIC;
  BEGIN
    SELECT TRUNC(DBMS_RANDOM.VALUE(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL))
    INTO DELETED
    FROM DUAL;

    DELETED_IDS := SELECT_RANDOM_GOOD_TO_PROM_IDS(DELETED);

    FOR I IN 1..DELETED_IDS.COUNT LOOP
      DELETE_GOOD_TO_PROMOTION(DELETED_IDS(I));
    END LOOP;

    RETURN DELETED_IDS;
  END;
/
CREATE OR REPLACE PROCEDURE INSERT_RANDOM_DATA(
  RECORDS_NUMBER_FLOOR    IN  NUMBER,
  RECORDS_NUMBER_CEIL     IN  NUMBER,
  GOOD_IDS                OUT ARRAY_T,
  PROMOTION_IDS           OUT ARRAY_T,
  REALIZATION_IDS         OUT ARRAY_T,
  GOODS_TO_PROMOTIONS_IDS OUT WIDE_ARRAY_T)
AS
  BEGIN
    GOOD_IDS := INSERT_RANDOM_GOODS(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL);
    PROMOTION_IDS := INSERT_RANDOM_PROMOTIONS(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL);
    REALIZATION_IDS := INSERT_RANDOM_REALIZATIONS(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL, GOOD_IDS, PROMOTION_IDS);
    GOODS_TO_PROMOTIONS_IDS := INSERT_RANDOM_GOODS_TO_PROM(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL, GOOD_IDS,
                                                           PROMOTION_IDS);
  END;
/
CREATE OR REPLACE PROCEDURE UPDATE_RANDOM_DATA(
  RECORDS_NUMBER_FLOOR IN  NUMBER,
  RECORDS_NUMBER_CEIL  IN  NUMBER,
  GOOD_IDS             OUT ARRAY_T,
  PROMOTION_IDS        OUT ARRAY_T,
  REALIZATION_IDS      OUT ARRAY_T)
AS
  BEGIN
    GOOD_IDS := UPDATE_RANDOM_GOODS(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL);
    PROMOTION_IDS := UPDATE_RANDOM_PROMOTIONS(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL);
    REALIZATION_IDS := UPDATE_RANDOM_REALIZATIONS(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL);
  END;
/
CREATE OR REPLACE PROCEDURE DELETE_RANDOM_DATA(
  RECORDS_NUMBER_FLOOR    IN  NUMBER,
  RECORDS_NUMBER_CEIL     IN  NUMBER,
  GOOD_IDS                OUT ARRAY_T,
  PROMOTION_IDS           OUT ARRAY_T,
  REALIZATION_IDS         OUT ARRAY_T,
  GOODS_TO_PROMOTIONS_IDS OUT WIDE_ARRAY_T)
AS
  BEGIN
    GOOD_IDS := DELETE_RANDOM_GOODS(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL);
    PROMOTION_IDS := DELETE_RANDOM_PROMOTIONS(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL);
    REALIZATION_IDS := DELETE_RANDOM_REALIZATIONS(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL);
    GOODS_TO_PROMOTIONS_IDS := DELETE_RANDOM_GOODS_TO_PROM(RECORDS_NUMBER_FLOOR, RECORDS_NUMBER_CEIL);
  END;
/